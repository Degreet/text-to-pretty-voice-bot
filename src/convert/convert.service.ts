import { CONVERT_PYTHON_FILE_PATH } from '../types/constants';
import { exec } from 'child_process';
import { Service } from 'nestgram';

import * as path from 'path';
import * as fs from 'fs/promises';

@Service()
export class ConvertService {
  get errorBasicMessage(): string {
    return '–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ';
  }

  get convertingMessage(): string {
    return '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º...';
  }

  get convertRulesMessage(): string {
    return `
      üßê <b>–î–ª—è –Ω–∞—á–∞–ª–∞</b>, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ –≤–∞—à–µ–º —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤.
      –í –Ω–∞—à–µ–º –±–æ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ
      –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π
    `.trim().replace(/  /g, '').replace(/\n/g, ' ') 
      + '\n\nüòé <b>–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã</b> –∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å:';
  }

  async convert(text: string, voice: string, callback?: Function): Promise<void> {
    try {
      const id: number = Math.floor(Math.random() * 9999999);
      const runPath: string = `python ${CONVERT_PYTHON_FILE_PATH} ${id} ${voice} ${text}`;

      exec(runPath, async (): Promise<void> => {
        const filePath: string = path.resolve(__dirname, '..', 'assets', `${id}.wav`);

        if (callback) {
          try {
            await callback(filePath);
          } catch (e: any) {
            console.warn(e);
            callback(filePath);
          }
        }

        await fs.rm(filePath);
      });
    } catch (e: any) {
      console.error(e);
    }
  }
}
